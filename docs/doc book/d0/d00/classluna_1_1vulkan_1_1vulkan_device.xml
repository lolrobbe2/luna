<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classluna_1_1vulkan_1_1vulkan_device" xml:lang="en-US">
<title>luna::vulkan::vulkanDevice Class Reference</title>
<indexterm><primary>luna::vulkan::vulkanDevice</primary></indexterm>
<para>
<computeroutput>#include &lt;vulkanDevice.h&gt;</computeroutput>
</para>
Inheritance diagram for luna::vulkan::vulkanDevice:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../de/d00/classluna_1_1vulkan_1_1vulkan_device__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for luna::vulkan::vulkanDevice:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../db/d00/classluna_1_1vulkan_1_1vulkan_device__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structluna_1_1vulkan_1_1vulkan_device_1_1device_handles">deviceHandles</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classluna_1_1vulkan_1_1vulkan_device_1af74bece14ffc07cd0cbc2c19b0d5a85a">vulkanDevice</link> (const <link linkend="_namespaceluna_1ac8dc8be643504d1935e8e08d0f7d1d87">ref</link>&lt; <link linkend="_classluna_1_1vulkan_1_1window">vulkan::window</link> &gt; &amp;Window)</para>
</listitem>
            <listitem><para>virtual <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a9107ebb35821385c9008574c7de7b434">~vulkanDevice</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1acdef289bdd4596c82ea9c7a8e697fe3e">createContext</link> () override</para>

<para>creates the device context. </para>
</listitem>
            <listitem><para>void <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a2dc4e70b3107536728605aca50620ce3">destroyContext</link> () override</para>
</listitem>
            <listitem><para>VkViewport <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a63d11e80067d6ec5591d61a4dbede7a3">getViewport</link> ()</para>

<para>returns the swapchain viewport. </para>
</listitem>
            <listitem><para>VkRect2D <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1af8d7f16d0aeb1ff58b74bd1c7d930e86">getScissor</link> ()</para>

<para>returns the swapchain scissor. </para>
</listitem>
            <listitem><para>VkFormat <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a9f0f88c958ad28eec5b1657985923da5">getSwapFormat</link> ()</para>

<para>returns the swapchain format. </para>
</listitem>
            <listitem><para>uint32_t <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1aa3c7f11adeffb13307efccfc2366db67">getQueueIndex</link> (const vkb::QueueType &amp;type)</para>

<para>returns the queue index. </para>
</listitem>
            <listitem><para>VkQueue <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1ac7f3094a53a43da29745639d918a882e">getQueue</link> (const vkb::QueueType &amp;type)</para>

<para>returns a queue based on the requested type . </para>
</listitem>
            <listitem><para>VkResult <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1abdc0e9ee9733c433e2f64f3e06917fec">createFramebuffers</link> (VkRenderPass renderPass)</para>

<para>creates the appropriate framebuffers for the swapchain. </para>
</listitem>
            <listitem><para><link linkend="_structluna_1_1vulkan_1_1vulkan_device_1_1device_handles">deviceHandles</link> <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a8800fb96ecc2f59731559e73c7229bbc">getDeviceHandles</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespaceluna_1ac8dc8be643504d1935e8e08d0f7d1d87">ref</link>&lt; <link linkend="_classluna_1_1vulkan_1_1vulkan_swapchain">vulkan::vulkanSwapchain</link> &gt; <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a3361292b69cd4a898587de41ddb11392">swapchain</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
<simplesect><title>primaryHelperFunctions helper functions used to create the device</title>
        <itemizedlist>
            <listitem><para>VkResult <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a35d6bd2075cdb2b13fec7b5a7a5a0f92">createInstance</link> ()</para>

<para>creates the vulkan instance. </para>
</listitem>
            <listitem><para>VkResult <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a3d8d74462989dcf7bbcedc88f31062ff">pickPhysicalDevice</link> ()</para>

<para>picks the most powerful rendering device. </para>
</listitem>
            <listitem><para>VkResult <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a8477f63f60e9dbd33f7b421542677540">createLogicalDevice</link> ()</para>

<para>creates the logical device. </para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; float &gt; <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1ae948d02e865d6e91e5ef6f15015997c5">queuePriorities</link> = { 0.99f }</para>
</listitem>
            <listitem><para>VkSurfaceKHR <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a04f1147e3507dc022038d141a11d402d">surface</link> = VK_NULL_HANDLE</para>
</listitem>
            <listitem><para><link linkend="_structluna_1_1vulkan_1_1vulkan_device_1_1device_handles">deviceHandles</link> <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1afda4bafc9533e7cf7f11b3c009308624">deviceHandle</link></para>
</listitem>
            <listitem><para><link linkend="_structluna_1_1vulkan_1_1queue_family_indices">vulkan::queueFamilyIndices</link> <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a341008b8201a5b2c276773588473d72b">queueFamily</link></para>
</listitem>
            <listitem><para>std::vector&lt; VkDeviceQueueCreateInfo &gt; <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a0a2bef2693e2e1fa8dbec5aa306b8de0">queueCreateInfos</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>secondaryHelperFunctions helper functions used by the primary helper functions    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; const char * &gt; <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1a5b8b5d17dcb2f453fea603deaa2b043c">getRequiredExtensions</link> ()</para>

<para>checks if all requested validation layers are supported. </para>
</listitem>
            <listitem><para>VkDeviceQueueCreateInfo * <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1ab191e08dd1a5cbaf7696b752a130bcdb">createQueues</link> ()</para>

<para>rates the gpu based on expected performance with a score. </para>
</listitem>
            <listitem><para>static VKAPI_ATTR VkBool32 VKAPI_CALL <link linkend="_classluna_1_1vulkan_1_1vulkan_device_1aab0d20b2d5b585ff4a9b132dada4dc64">vulkanDevice::debugCallback</link> (VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData, void *pUserData)</para>

<para>the debug callback function for vulkan debug and error catching. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>this is the vulkan device class and creates a rendering context. <literallayout><computeroutput>ref&lt;device&gt;&#32;rederingDevice&#32;=&#32;std::make_shared&lt;device&gt;(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classluna_1_1vulkan_1_1vulkan_device_1af74bece14ffc07cd0cbc2c19b0d5a85a">vulkanDevice</link>(<link linkend="_classluna_1_1renderer_1_1device_1aafbc6cc53be313fff534273ea56b1345">window</link>));
</computeroutput></literallayout> </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1af74bece14ffc07cd0cbc2c19b0d5a85a"/><section>
    <title>vulkanDevice()</title>
<indexterm><primary>vulkanDevice</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>vulkanDevice</secondary></indexterm>
<para><computeroutput>luna::vulkan::vulkanDevice::vulkanDevice (const <link linkend="_namespaceluna_1ac8dc8be643504d1935e8e08d0f7d1d87">ref</link>&lt; <link linkend="_classluna_1_1vulkan_1_1window">vulkan::window</link> &gt; &amp; Window)</computeroutput></para>
<para>@creates a vulkan device using the ref to the main window.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Window</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_af74bece14ffc07cd0cbc2c19b0d5a85a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a9107ebb35821385c9008574c7de7b434"/><section>
    <title>~vulkanDevice()</title>
<indexterm><primary>~vulkanDevice</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>~vulkanDevice</secondary></indexterm>
<para><computeroutput>luna::vulkan::vulkanDevice::~vulkanDevice ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_a9107ebb35821385c9008574c7de7b434_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1acdef289bdd4596c82ea9c7a8e697fe3e"/><section>
    <title>createContext()</title>
<indexterm><primary>createContext</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>createContext</secondary></indexterm>
<para><computeroutput>void luna::vulkan::vulkanDevice::createContext ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>creates the device context. </para>
</para>
<para>
Implements <link linkend="_classluna_1_1renderer_1_1device_1a742514b1cf12273e7a0b8750723e451c">luna::renderer::device</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_acdef289bdd4596c82ea9c7a8e697fe3e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_acdef289bdd4596c82ea9c7a8e697fe3e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1abdc0e9ee9733c433e2f64f3e06917fec"/><section>
    <title>createFramebuffers()</title>
<indexterm><primary>createFramebuffers</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>createFramebuffers</secondary></indexterm>
<para><computeroutput>VkResult luna::vulkan::vulkanDevice::createFramebuffers (VkRenderPass renderPass)</computeroutput></para><para>

<para>creates the appropriate framebuffers for the swapchain. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>renderPass</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>VK_SUCCESS when buffer creation whas succesful </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a35d6bd2075cdb2b13fec7b5a7a5a0f92"/><section>
    <title>createInstance()</title>
<indexterm><primary>createInstance</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>createInstance</secondary></indexterm>
<para><computeroutput>VkResult luna::vulkan::vulkanDevice::createInstance ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>creates the vulkan instance. </para>
</para>

<para><formalpara><title>Returns</title>

<para>VK_SUCCESS when creation whas succesful. </para>

<para>VK_ERROR_LAYER_NOT_PRESENT when a requested validation layer is not supported </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_a35d6bd2075cdb2b13fec7b5a7a5a0f92_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_a35d6bd2075cdb2b13fec7b5a7a5a0f92_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a8477f63f60e9dbd33f7b421542677540"/><section>
    <title>createLogicalDevice()</title>
<indexterm><primary>createLogicalDevice</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>createLogicalDevice</secondary></indexterm>
<para><computeroutput>VkResult luna::vulkan::vulkanDevice::createLogicalDevice ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>creates the logical device. </para>
</para>

<para><formalpara><title>Returns</title>

<para>VK_SUCCES </para>

<para>for VK_ERROR look at the vulkan documentation: <link xlink:href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDevice.html">https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCreateDevice.html</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_a8477f63f60e9dbd33f7b421542677540_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1ab191e08dd1a5cbaf7696b752a130bcdb"/><section>
    <title>createQueues()</title>
<indexterm><primary>createQueues</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>createQueues</secondary></indexterm>
<para><computeroutput>VkDeviceQueueCreateInfo * luna::vulkan::vulkanDevice::createQueues ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>rates the gpu based on expected performance with a score. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>device</entry><entry>
<para>the physicalDevice(GPU) to be rated </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int the score the physical device has. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_ab191e08dd1a5cbaf7696b752a130bcdb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a2dc4e70b3107536728605aca50620ce3"/><section>
    <title>destroyContext()</title>
<indexterm><primary>destroyContext</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>destroyContext</secondary></indexterm>
<para><computeroutput>void luna::vulkan::vulkanDevice::destroyContext ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>detroys the device context. </para>
<para>
Implements <link linkend="_classluna_1_1renderer_1_1device_1a8ff116c44dcc0f44b54f1022f9570536">luna::renderer::device</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_a2dc4e70b3107536728605aca50620ce3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a8800fb96ecc2f59731559e73c7229bbc"/><section>
    <title>getDeviceHandles()</title>
<indexterm><primary>getDeviceHandles</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>getDeviceHandles</secondary></indexterm>
<para><computeroutput><link linkend="_structluna_1_1vulkan_1_1vulkan_device_1_1device_handles">vulkanDevice::deviceHandles</link> luna::vulkan::vulkanDevice::getDeviceHandles ( )</computeroutput></para>
<para>#brief returns the device subhandles.</para>

<para><formalpara><title>Returns</title>

<para><link linkend="_structluna_1_1vulkan_1_1vulkan_device_1_1device_handles">deviceHandles</link> struct </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1ac7f3094a53a43da29745639d918a882e"/><section>
    <title>getQueue()</title>
<indexterm><primary>getQueue</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>getQueue</secondary></indexterm>
<para><computeroutput>VkQueue luna::vulkan::vulkanDevice::getQueue (const vkb::QueueType &amp; type)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>returns a queue based on the requested type . </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>vkb::QueueType</entry><entry>
<para>type </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1aa3c7f11adeffb13307efccfc2366db67"/><section>
    <title>getQueueIndex()</title>
<indexterm><primary>getQueueIndex</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>getQueueIndex</secondary></indexterm>
<para><computeroutput>uint32_t luna::vulkan::vulkanDevice::getQueueIndex (const vkb::QueueType &amp; type)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>returns the queue index. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>vkb:QueueType</entry><entry>
<para>type </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a5b8b5d17dcb2f453fea603deaa2b043c"/><section>
    <title>getRequiredExtensions()</title>
<indexterm><primary>getRequiredExtensions</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>getRequiredExtensions</secondary></indexterm>
<para><computeroutput>std::vector&lt; const char * &gt; luna::vulkan::vulkanDevice::getRequiredExtensions ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>checks if all requested validation layers are supported. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>validationLayers</entry><entry>
<para>requested validation layers. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>VK_SUCCES when all requested validation layers are supported. </para>

<para>VK_ERROR_LAYER_NOT_PRESENT when a requested validation layer is not supported. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_a5b8b5d17dcb2f453fea603deaa2b043c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1af8d7f16d0aeb1ff58b74bd1c7d930e86"/><section>
    <title>getScissor()</title>
<indexterm><primary>getScissor</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>getScissor</secondary></indexterm>
<para><computeroutput>VkRect2D luna::vulkan::vulkanDevice::getScissor ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>returns the swapchain scissor. </para>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a9f0f88c958ad28eec5b1657985923da5"/><section>
    <title>getSwapFormat()</title>
<indexterm><primary>getSwapFormat</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>getSwapFormat</secondary></indexterm>
<para><computeroutput>VkFormat luna::vulkan::vulkanDevice::getSwapFormat ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>returns the swapchain format. </para>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a63d11e80067d6ec5591d61a4dbede7a3"/><section>
    <title>getViewport()</title>
<indexterm><primary>getViewport</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>getViewport</secondary></indexterm>
<para><computeroutput>VkViewport luna::vulkan::vulkanDevice::getViewport ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>returns the swapchain viewport. </para>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a3d8d74462989dcf7bbcedc88f31062ff"/><section>
    <title>pickPhysicalDevice()</title>
<indexterm><primary>pickPhysicalDevice</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>pickPhysicalDevice</secondary></indexterm>
<para><computeroutput>VkResult luna::vulkan::vulkanDevice::pickPhysicalDevice ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>picks the most powerful rendering device. </para>
</para>

<para><formalpara><title>Returns</title>

<para>VK_SUCCES when suitable physical device(GPU) was found. </para>

<para>VK_ERROR_DEVICE_LOST when no suitable physical device(GPU) could be found. </para>

<para>VK_ERROR_INCOMPATIBLE_DRIVER when the driver version is outdated or incompatible. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_a3d8d74462989dcf7bbcedc88f31062ff_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1aab0d20b2d5b585ff4a9b132dada4dc64"/><section>
    <title>vulkanDevice::debugCallback()</title>
<indexterm><primary>vulkanDevice::debugCallback</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>vulkanDevice::debugCallback</secondary></indexterm>
<para><computeroutput>static VKAPI_ATTR VkBool32 VKAPI_CALL luna::vulkan::vulkanDevice::vulkanDevice::debugCallback (VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT * pCallbackData, void * pUserData)<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>the debug callback function for vulkan debug and error catching. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>messageSeverity</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>messageTypes</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>pCallbackData</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>pUserData</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d0/d00/classluna_1_1vulkan_1_1vulkan_device_aab0d20b2d5b585ff4a9b132dada4dc64_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1afda4bafc9533e7cf7f11b3c009308624"/><section>
    <title>deviceHandle</title>
<indexterm><primary>deviceHandle</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>deviceHandle</secondary></indexterm>
<para><computeroutput><link linkend="_structluna_1_1vulkan_1_1vulkan_device_1_1device_handles">deviceHandles</link> luna::vulkan::vulkanDevice::deviceHandle<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a0a2bef2693e2e1fa8dbec5aa306b8de0"/><section>
    <title>queueCreateInfos</title>
<indexterm><primary>queueCreateInfos</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>queueCreateInfos</secondary></indexterm>
<para><computeroutput>std::vector&lt;VkDeviceQueueCreateInfo&gt; luna::vulkan::vulkanDevice::queueCreateInfos<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a341008b8201a5b2c276773588473d72b"/><section>
    <title>queueFamily</title>
<indexterm><primary>queueFamily</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>queueFamily</secondary></indexterm>
<para><computeroutput><link linkend="_structluna_1_1vulkan_1_1queue_family_indices">vulkan::queueFamilyIndices</link> luna::vulkan::vulkanDevice::queueFamily<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1ae948d02e865d6e91e5ef6f15015997c5"/><section>
    <title>queuePriorities</title>
<indexterm><primary>queuePriorities</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>queuePriorities</secondary></indexterm>
<para><computeroutput>std::vector&lt;float&gt; luna::vulkan::vulkanDevice::queuePriorities = { 0.99f }<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a04f1147e3507dc022038d141a11d402d"/><section>
    <title>surface</title>
<indexterm><primary>surface</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>surface</secondary></indexterm>
<para><computeroutput>VkSurfaceKHR luna::vulkan::vulkanDevice::surface = VK_NULL_HANDLE<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classluna_1_1vulkan_1_1vulkan_device_1a3361292b69cd4a898587de41ddb11392"/><section>
    <title>swapchain</title>
<indexterm><primary>swapchain</primary><secondary>luna::vulkan::vulkanDevice</secondary></indexterm>
<indexterm><primary>luna::vulkan::vulkanDevice</primary><secondary>swapchain</secondary></indexterm>
<para><computeroutput><link linkend="_namespaceluna_1ac8dc8be643504d1935e8e08d0f7d1d87">ref</link>&lt;<link linkend="_classluna_1_1vulkan_1_1vulkan_swapchain">vulkan::vulkanSwapchain</link>&gt; luna::vulkan::vulkanDevice::swapchain</computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/robbe/source/repos/lolrobbe2/luna/luna/src/core/vulkan/device/<link linkend="_vulkan_device_8h">vulkanDevice.h</link>C:/Users/robbe/source/repos/lolrobbe2/luna/luna/src/core/vulkan/device/<link linkend="_vulkan_device_8cpp">vulkanDevice.cpp</link></section>
</section>
